#!/usr/bin/env python3

import os
import stat
import errno
import socks
import logging
import sys
import re
import asyncio
import tornado.ioloop
import tornado.autoreload

# Configuración
from config import defaults

# Utilidades
from utils.General import parse_config
from utils.General import (proc_stream, proc_control)

# Extras
from utils.extra import procs_repr
from utils.extra import init_db
from utils.extra import init_log
from utils.extra import create_pool
from utils.extra import create_translation

# Módulos
from modules.Infrastructure import core
from modules.Crypt import ed25519
from modules.Privacy import addproxy

# Cuando haya funcionalidades futuras y sean incompatibles con versiones
# anteriores, la versión le indicará al cliente qué hacer.
__VERSION__ = "2.0.0"

def safeQuit(ProcControl):
    if (len(ProcControl) > 0):
        while (len(ProcControl) > 0):
            try:
                quest = input(_("Todavía hay procesos abiertos. ¿Desea enviar una señal "
                              "<SIGKILL>?: "))[:1]

            except (KeyboardInterrupt, EOFError):
                print()
                continue

            if not (quest):
                continue

            if (re.match("[sS]|[yY]|1", quest)):
                logging.critical(_("mandando una señal <SIGKILL>..."))

                ProcControl.clear(killProc=True)

            elif (re.match("[nN]|0", quest)):
                logging.warning(_("Mandando una señal <SIGTERM>..."))

                ProcControl.clear()

            else:
                logging.warning(_("Opción inválida, eliga entre ([sS]|[yY]|1) "
                                "(afirmación) o ([nN]|0) (negación)"))

parameters = None
handler = None
ioloop = tornado.ioloop.IOLoop().current()

options = {}

try:
    settings = parse_config.parse()

    # La configuración
    crypt_limits = settings["Crypt Limits"]
    client_conf = settings["Client"]
    logging_conf = settings["Logging"]
    server_conf = settings["Server"]
    proxy_conf = settings["Proxy"]
    templates_conf = settings["Templates"]

    # El envoltorio gettext para la internacionalización
    _ = create_translation.create("UTesla")
    
    # Para saber cuántas claves existen
    key_exists = 0

    # Configuramos algunos parámetros de logging
    init_log.init(logging_conf)

    logging.info(_("Iniciando..."))

    # Primero se crea la base de datos y las tablas o lo
    # que sea que se encuentre en el archivo SQL inicial.
    init_db.init(server_conf.get("mysql_db"),
                 defaults.sqlfile)

    # Verificamos cuántas claves existen
    for key_exist in (server_conf.get("pub_key"),
                      server_conf.get("priv_key")):
        logging.debug(_("Comprobando la existencia de: %s"), key_exist)

        if (os.path.isfile(key_exist)):
            key_exists += 1

        else:
            logging.warning(_("¡%s no existe!"), key_exist)

    # Verificamos que tengamos las claves pública y privada
    if (key_exists == 0):
        logging.debug(_("¡Las claves Ed25519 no existen!"))
        logging.info(_("Generando claves Ed25519..."))

        keypair = ed25519.to_raw()

        logging.info(_("¡Claves Ed25519 generadas con éxito!"))
        logging.debug(_("Escribiendo clave pública en el disco (%s)..."),
            server_conf.get("pub_key")

        )

        with open(server_conf.get("pub_key"), "wb") as pub_key_fd:
            pub_key_fd.write(keypair.public)

        logging.debug(_("Escribiendo clave privada en el disco (%s)..."),
            server_conf.get("priv_key")

        )

        with open(server_conf.get("priv_key"), "wb") as priv_key_fd:
            priv_key_fd.write(keypair.private)

    elif (key_exists == 1):
        logging.error(_("¡El par de claves Ed25519 están incompletas!"))

        sys.exit(errno.ENOENT)

    else:
        logging.debug(_("Importando claves Ed25519..."))

        with open(server_conf.get("pub_key"), "rb") as pub_key_fd:
            with open(server_conf.get("priv_key"), "rb") as priv_key_fd:
                keypair = ed25519.import_keys(
                    pub_key_fd.read(), priv_key_fd.read()
                    
                )

        logging.info(_("¡Claves Ed25519 importadas con éxito!"))

    logging.debug(
        _("Asignando permisos (CHMOD %o) a '%s'"),
        (stat.S_IREAD | stat.S_IWRITE), server_conf.get("priv_key"))

    # Asignamos los permisos correctos para proteger un poco más
    # la clave privada.
    os.chmod(server_conf.get("priv_key"), stat.S_IREAD | stat.S_IWRITE)

    # Para MySQL
    loop = asyncio.get_event_loop()
    pool_object = loop.run_until_complete(
        create_pool.create(
            database=server_conf.get("mysql_db"),
            config=settings

        )

    )

    # Iniciamos la configuración del proxy
    if (proxy_conf.get("use_proxy")):
        logging.info(_("Habilitando proxy..."))

        addproxy.start(proxy_conf.get("proxy_type"),
                       proxy_conf.get("addr"),
                       proxy_conf.get("port"),
                       proxy_conf.get("rdns"),
                       proxy_conf.get("username"),
                       proxy_conf.get("password"))

        logging.debug(_("Usando proxy: %s://%s:%d con resolución DNS remota %s"),
            socks.PROXY_TYPES[proxy_conf.get("proxy_type")],
            proxy_conf.get("addr"),
            proxy_conf.get("port"),
            _("habilitada") if (proxy_conf.get("rds")) else _("deshabilitada")

        )

    if (server_conf.get("autoreload")):
        logging.warning(_("¡La autorecarga de servicios está habilitada!"))

        tornado.autoreload.start(server_conf.get("check_time"))

    # Definimos los procedimientos
    proc_control_obj = proc_control.ProcControl(
        server_conf.get("init_proc"), server_conf.get("clearProcs")

    )
    proc_stream_obj = proc_stream.ProcStream()

    logging.debug(_("Configurando parámetros del servidor..."))

    # Opciones para el servidor
    options["init_path"] = server_conf.get("init_path")
    options["user_data"] = server_conf.get("user_data")
    options["pool_object"] = pool_object
    options["procs"] = procs_repr.procedures(
        proc_control_obj, proc_stream_obj
            
    )
    options["memory_limit"] = server_conf.get("memory_limit")
    options["utesla_version"] = __VERSION__
    options["service_file"] = server_conf.get("services")
    options["recv_timeout"] = server_conf.get("recv_timeout")
    options["read_chunk_size"] = server_conf.get("read_chunk_size")
    options["index_name"] = server_conf.get("index_name")
    options["admin_service"] = server_conf.get("admin_service")
    options["keypair"] = keypair
    options["templates"] = templates_conf
    options["autoreload"] = server_conf.get("autoreload")

    logging.warning(_("Iniciando el núcleo..."))

    handler = core.start(
        server_conf.get("lhost"),
        server_conf.get("lport"),
        **options

    )

    ioloop.start()

except KeyboardInterrupt:
    pass

except Exception as err:
    logging.exception(_("Ocurrió una excepción inesperada:"))

finally:
    ioloop.stop()

    if (handler is not None):
        try:
            handler.procs.ProcStream.removeall()
        
        except:
            logging.exception(_("Ocurrió una excepción cerrando los archivos abiertos"))
        
        try:
            handler.procs.ProcControl.setTarget("processes")
            handler.procs.ProcControl.clear()

            # Tratamos de salir mandando una señal <SIGTERM> o <SIGKILL> según lo decida el usuario
            safeQuit(handler.procs.ProcControl)

        except:
            logging.exception(_("Ocurrió una excepción cerrando los procesos aún abiertos"))

# Restauramos la configuración del proxy
addproxy.stop()

logging.info(_("Terminado: %d"), os.getpid())

# Y salimos :p
sys.exit(0)
